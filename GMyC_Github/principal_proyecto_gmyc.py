# -*- coding: utf-8 -*-
"""Proyecto_GMyC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDKAb2wWDY2m_zLO6bzt5NA_Rz7xxa_m
"""

# -*- coding:utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt

def LecturaDatosTec ():
    L = int(input('Longitud del sistema     : L = '))
    C1 = int(input('Condicion de frontera C1 = '))
    C2 = int(input('Condicion de frontera C2 = '))
    N = int(input('Numero de nodos N: '))
    print("\n--------- Datos del sistema  ----------\n")
    print("Longitud del sistema >> ",L)
    print("Condicion de frontera C1 >> ", C1)
    print("Condicion de frontera C2 >> ", C2)
    print("Numero de Nodos N >> ", N)
    print("\n\n")
    
    
def calibracion1 ():
    
    L = int(input('Longitud del sistema     : L = '))
    C1 = int(input('Condicion de frontera C1 = '))
    C2 = int(input('Condicion de frontera C2 = '))
    N = int(input('Numero de nodos N: ')) 
    print("\n--------- Datos del sistema  ----------\n")
    print("Longitud del sistema >> ",L)
    print("Condicion de frontera C1 >> ", C1)
    print("Condicion de frontera C2 >> ", C2)
    print("Numero de Nodos N >> ", N)
    
    x=np.linspace(0,L,N) #Malla
    dx=L/(N-1) #distancia entre nodo y nodo
    print("Tamano de la malla >> ", dx)

    #Sistema de ecuaciones
    A=np.zeros((N,N)) #Matriz A
    b=np.zeros(N)

    #Llenar matriz
    for i in range (N):
        if i==0:
            A[i][i]=-1/dx**2
            A[i][i+1]=1/dx**2
        elif i==N-1:
            A[i][i]=1
            b[i]=C2
        else:
            A[i][i]=-2/dx**2
            A[i][i+1]=1/dx**2
            A[i][i-1]=1/dx**2
    print(A)
    print(b)

    #Resolviendo el sistema de ecuaciones

    Ainv=np.linalg.inv(A) #Matriz inversa
    T=np.dot(Ainv,b) #Solucion
    print(T)
    
    #Grafica

    plt.plot(x,T,'--go')
    plt.title('(sin fuente) y k=cte')
    plt.xlabel("$x$")
    plt.ylabel("$T(°C)$")
    plt.show()


def calibracion2 ():
    
    L = int(input('Longitud del sistema     : L = '))
    C1 = int(input('Condicion de frontera C1 = '))
    C2 = int(input('Condicion de frontera C2 = '))
    N = int(input('Numero de nodos N: ')) 
    print("\n--------- Datos del sistema  ----------\n")
    print("Longitud del sistema >> ",L)
    print("Condicion de frontera C1 >> ", C1)
    print("Condicion de frontera C2 >> ", C2)
    print("Numero de Nodos N >> ", N)
    
    x=np.linspace(0,L,N) #Malla
    dx=L/(N-1) #distancia entre nodo y nodo
    print("Tamano de la malla >> ", dx)

    #Sistema de ecuaciones
    A=np.zeros((N,N)) #Matriz A
    b=np.zeros(N)

    #Llenar matriz
    for i in range (N):
        if i==0:
            A[i][i]=1
            b[i]=C1
        elif i==N-1:
            A[i][i]=1
            b[i]=C2
        else:
            A[i][i]=-2/dx**2
            A[i][i+1]=1/dx**2
            A[i][i-1]=1/dx**2

    print(A)
    print(b)

    #Resolviendo el sistema de ecuaciones

    Ainv=np.linalg.inv(A) #Matriz inversa
    T=np.dot(Ainv,b) #Solucion
    print(T)
    
    #Grafica

    plt.plot(x,T,'--go')
    plt.title('(con fuente) y k=cte')
    plt.xlabel("$x$")
    plt.ylabel("$T(°C)$")
    plt.show()

def calibracion3():

    L = int(input('Longitud del sistema     : L = '))
    C1 = int(input('Condicion de frontera C1 = '))
    C2 = int(input('Condicion de frontera C2 = '))
    N = int(input('Numero de nodos N: ')) 
    print("\n--------- Datos del sistema  ----------\n")
    print("Longitud del sistema >> ",L)
    print("Condicion de frontera C1 >> ", C1)
    print("Condicion de frontera C2 >> ", C2)
    print("Numero de Nodos N >> ", N)
    
    x=np.linspace(0,L,N) #Malla
    dx=L/(N-1) #distancia entre nodo y nodo
    print("Tamano de la malla >> ", dx)

    #Sistema de ecuaciones
    A=np.zeros((N,N)) #Matriz A
    b=np.zeros(N)
    k = np.exp(1)*np.exp(x)
    print(k)

    #Llenar matriz
    for i in range (N):
        if i==0:
            A[i][i]=((1/dx**2)*k)
            b[i]=C1
        elif i==N-1:
            A[i][i]=(-1/dx**2)
            b[i]=C2
        else:
            A[i][i]=-2/dx**2
            A[i][i+1]=1/dx**2
            A[i][i-1]=1/dx**2

    print(A)
    print(b)

    #Resolviendo el sistema de ecuaciones

    Ainv=np.linalg.inv(A) #Matriz inversa
    T=np.dot(Ainv,b) #Solucion
    print(T)
    
    #Grafica

    plt.plot(x,T,'--go')
    plt.title('Ejemplo de calibracion 1')
    plt.xlabel("$x$")
    plt.ylabel("$T(°C)$")
    plt.show()


def calibracion5():

    L = int(input('Longitud del sistema     : L = '))
    C1 = int(input('Condicion de frontera C1 = '))
    C2 = int(input('Condicion de frontera C2 = '))
    N = int(input('Numero de nodos N: ')) 
    print("\n--------- Datos del sistema  ----------\n")
    print("Longitud del sistema >> ",L)
    print("Condicion de frontera C1 >> ", C1)
    print("Condicion de frontera C2 >> ", C2)
    print("Numero de Nodos N >> ", N)
    
    x=np.linspace(0,L,N) #Malla
    dx=L/(N-1) #distancia entre nodo y nodo
    print("Tamano de la malla >> ", dx)

    #Sistema de ecuaciones
    A=np.zeros((N,N)) #Matriz A
    b=np.zeros(N)

    k = np.sin(3.1416 * 4 * x) + 1/2

    print(k)

    #Llenar matriz
    for i in range (N):
        if i==0:
            A[i][i]=(1/dx**2) * 1/2
            b[i]=C1
        elif i==N-1:
            A[i][i]=(1/dx**2) * 1/2
            b[i]=C2
        else:
            A[i][i]=(1/dx**2) 
            A[i][i+1]=(1/dx**2)  + 1/2
            A[i][i-1]=(1/dx**2)  - 1/2

    print(A)
    print(b)

    #Resolviendo el sistema de ecuaciones

    Ainv=np.linalg.inv(A) #Matriz inversa
    T=np.dot(Ainv,b) #Solucion
    print(T)
    
    #Grafica

    plt.plot(x,T,'--go')
    plt.title('Ejemplo de calibracion 3')
    plt.xlabel("$x$")
    plt.ylabel("$T(°C)$")
    plt.show()

import os

def menu():
    
    os.system('clear')
    
    print("\n------- M E N U ----------\n")
    
    print("\t 1. Lectura de datos desde teclado")
    
    print("\t 2. Lectura de datos desde archivo")
    
    print("\t 3. Conducción de calor estacionaria sin fuentes y conductividad (k) constante")
    
    print("\t 4. Conducción de calor estacionaria con fuentes y conductividad (k) constante")
    
    print("\t 5. Ejemplo de calibracion 1")
    
    print("\t 6. Ejemplo de calibracion 2")

    print("\t 7. Ejemplo de calibracion 3")

    print("\t 8. Salir")
    
    
while True:
  menu()
  opcion = input ("Seleccion una opcion >> ")
    
  if opcion =="1":
        
      print("\n--------- Lectura de datos desde teclado  ----------\n")
      LecturaDatosTec()
  
  elif opcion == "2":
      
      print("\n-------- Lectura de datos desde archivo   ----------\n")
        
  elif opcion == "3":
      
    print("\n-- Conducción de calor estacionaria sin fuentes y conductividad (k) constante --\n")
    calibracion1()

  elif opcion == "4":
    
    print("\n-- Conducción de calor estacionaria con fuentes y conductividad (k) constante --\n")
    calibracion2()

  elif opcion == "5":

    print("\n ----- Ejemplo de calibracion 1 -----\n")
    calibracion3()


  elif opcion == "6":

    print("\n ----- Ejemplo de calibracion 2 -----\n")
    print("Para ejecutar, deberán poner todos los archivos en el mismo directorio, luego ejecutar desde línea de comandos:")
    print("python 1D_Poisson_06.py INPUT02 SALIDA")
    print("donde SALIDA será un archivo generado con la solución que se calculó.")

  elif opcion == "7":

    print("\n ----- Ejemplo de calibracion 3 -----\n")

    calibracion5()

  elif opcion == "8":

    print("\n ----- SALIR -----\n")

    break
  
  else:

    print("\n ----- ERROR -----\n")
    input("\n------ Opcion incorrecta, presiona <Enter> para continuar -----\n\n")
